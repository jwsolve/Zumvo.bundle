import os
import sys
import base64

try:
	path = os.getcwd().split("?\\")[1].split('Plug-in Support')[0]+"Plug-ins\Zumvo.bundle\Contents\Services\URL\Zumvo\Modules"
except:
	path = os.getcwd().split("Plug-in Support")[0]+"Plug-ins/Zumvo.bundle/Contents/Services/URL/Zumvo/Modules"
if path not in sys.path:
	sys.path.append(path)

import zumvofilmDecrypter

########################################################################################
def NormalizeURL(url):

	return url.split('&')[0]

########################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)

	title = page.xpath("//h1[@class='item']/a/span/@title")[0]
	description = page.xpath("//head/meta[@property='og:description']/@content")[0]
	thumb = page.xpath("//head/meta[@property='og:image']/@content")[0]

	return VideoClipObject(
		title = title,
		summary = description,
		thumb = thumb
	)

########################################################################################
def MediaObjectsForURL(url):

	mo = []

	for resolution in ['720', '480', '360']:

		mo.append(
			MediaObject(
				video_resolution = resolution,
				container = Container.MP4,
				audio_channels = 2,
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				optimized_for_streaming = True,
				parts = [
					PartObject(
						key =
							Callback(
								PlayVideo,
								url = url,
								resolution = resolution
							)
					)
				]
			)
		)

	return mo

########################################################################################
@indirect
def PlayVideo(url, resolution):

	page_content = HTTP.Request(url).content
	proxy_url = Regex('.*\"proxy.link\" *: *\"(.*)\".*', Regex.IGNORECASE|Regex.MULTILINE).search(page_content).groups()[0]
	encoded_link = proxy_url.replace('zumvo*','',1)
	x = zumvofilmDecrypter.zumvofilmDecrypter(198,128)
	key = "NlFQU1NQSGJrbXJlNzlRampXdHk="
	decoded_url = x.decrypt(encoded_link, key.decode('base64','strict'), "ECB").split('\0')[0]
	picasa = HTTP.Request(decoded_url).content

	try:
		picasa_url= Regex('\"url\":\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\"').findall(picasa)[1]
		first_video_url = picasa_url.replace("\"url\":\"","",1)
		final_url = first_video_url.replace('\"','',1)

		return IndirectResponse(VideoClipObject, key=final_url)
	except:
		return ObjectContainer(header="Error", message="Unfortunately this video is unavailable")
